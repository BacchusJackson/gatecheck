package blacklist

import (
	"fmt"
	"github.com/gatecheckdev/gatecheck/pkg/artifact"
	gcStrings "github.com/gatecheckdev/gatecheck/pkg/strings"
	"strings"
)

func BlacklistedVulnerabilities(report artifact.GrypeScanReport, blacklist artifact.KEVCatalog) []artifact.KEVCatalogVulnerability {
	matchedVulnerabilities := make([]artifact.KEVCatalogVulnerability, 0)

	for _, reportedVulnerability := range report.Matches {
		for _, blacklistCVE := range blacklist.Vulnerabilities {
			if reportedVulnerability.Vulnerability.ID == blacklistCVE.CveID {
				matchedVulnerabilities = append(matchedVulnerabilities, blacklistCVE)
			}
		}
	}

	return matchedVulnerabilities
}

func StringBlacklistedVulnerabilities(catVersion string, v []artifact.KEVCatalogVulnerability) string {
	var sb strings.Builder
	sb.WriteString("Blacklisted Vulnerabilities Report\n")
	sb.WriteString(fmt.Sprintf("Catalog Version: %s\n", catVersion))

	if len(v) == 0 {
		sb.WriteString("0 Blacklisted Vulnerabilities Matched\n")
		return sb.String()
	}

	table := new(gcStrings.Table).WithHeader("CVE ID", "Date Added", "CVE.org Link", "Vulnerability Name")

	for _, value := range v {
		link := fmt.Sprintf("https://www.cve.org/CVERecord?id=%s", value.CveID)
		table = table.WithRow(value.CveID, value.DateAdded, link, value.VulnerabilityName)

	}

	sb.WriteString(table.String())
	return sb.String()
}
