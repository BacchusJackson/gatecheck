package defectDojo

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gatecheckdev/gatecheck/pkg/exporter/defectDojo/models"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestService_GetProductTypePagination(t *testing.T) {
	service := mockAPIClient(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		objects := make([]interface{}, 200)

		for i := 0; i < 200; i++ {
			objects[i] = models.ProductType{Id: i,
				Name: fmt.Sprintf("Gatecheck %d", i), Description: "Some app description"}
		}
		switch r.RequestURI {
		case "/api/v2/product_types/":
			next := fmt.Sprintf("http://%s/api/v2/product_types/offset=50&limit=50", r.Host)
			res := models.PaginatedResponse{Count: 200, Next: next, Results: objects[0:50]}
			_ = json.NewEncoder(w).Encode(res)
		case "/api/v2/product_types/offset=50&limit=50":
			next := fmt.Sprintf("http://%s/api/v2/product_types/offset=100&limit=50", r.Host)
			res := models.PaginatedResponse{Count: 200, Next: next, Results: objects[50:100]}
			_ = json.NewEncoder(w).Encode(res)
		case "/api/v2/product_types/offset=100&limit=50":
			next := fmt.Sprintf("http://%s/api/v2/product_types/offset=150&limit=50", r.Host)
			res := models.PaginatedResponse{Count: 200, Next: next, Results: objects[100:150]}
			_ = json.NewEncoder(w).Encode(res)
		case "/api/v2/product_types/offset=150&limit=50":
			next := ""
			res := models.PaginatedResponse{Count: 200, Next: next, Results: objects[150:200]}
			_ = json.NewEncoder(w).Encode(res)
		default:
			w.WriteHeader(http.StatusNotFound)
		}
	})

	productTypes, err := service.GetProductTypes()
	if err != nil {
		t.Fatal(err)
	}
	if len(productTypes) != 200 {
		t.Fatalf("expected 200 productTypes in response, only received %d\n", len(productTypes))
	}
}

func TestService_GetProductTypes(t *testing.T) {
	object := models.ProductType{Id: 1, Name: "Gatecheck", Description: "Some app description"}
	service := mockedGET(object)

	productTypes, _ := service.GetProductTypes()

	t.Logf("%+v\n", productTypes)
	if productTypes[0].Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, productTypes[0].Id)
	}
}

func TestService_PostProductType(t *testing.T) {
	service := mockedPOST()

	productType := models.ProductType{Name: "Test Product Type", Description: "Auto generated by Gatecheck"}

	resProductType, _ := service.PostProductType(productType)

	t.Logf("%+v\n", resProductType)
	if resProductType.Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, resProductType.Id)
	}
}

func TestService_GetProduct(t *testing.T) {
	object := models.Product{Id: 1, Name: "Gatecheck CLI", Description: "Some product description"}
	service := mockedGET(object)

	products, _ := service.GetProducts()

	t.Logf("%+v\n", products)
	if products[0].Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, products[0].Id)
	}
}

func TestService_PostProduct(t *testing.T) {
	service := mockedPOST()

	product := models.Product{Name: "Test Product Type", Description: "Auto generated by Gatecheck"}

	resProduct, _ := service.PostProduct(product)

	t.Logf("%+v\n", resProduct)
	if resProduct.Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, resProduct.Id)
	}
}

func TestService_GetEngagements(t *testing.T) {
	object := models.Engagement{Id: 1, Name: "pipeline_1", Description: "Some engagement description"}
	service := mockedGET(object)

	engagements, _ := service.GetEngagements()

	t.Logf("%+v\n", engagements)
	if engagements[0].Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, engagements[0].Id)
	}
}
func TestService_GetEngagementsByProduct(t *testing.T) {
	object := models.Engagement{Id: 1, Name: "pipeline_1", Description: "Some engagement description"}
	service := mockedGET(object)

	engagements, _ := service.GetEngagementsByProduct(1)

	t.Logf("%+v\n", engagements)
	if engagements[0].Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, engagements[0].Id)
	}
}

func TestService_PostEngagement(t *testing.T) {
	service := mockedPOST()

	engagement := models.Engagement{Name: "Test Engagement Type", Description: "Auto generated by Gatecheck"}

	resEngagement, _ := service.PostEngagement(engagement)

	t.Logf("%+v\n", resEngagement)
	if resEngagement.Id != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, resEngagement.Id)
	}
}

type mockedBuffer struct{}

func (m mockedBuffer) Read(p []byte) (n int, err error) {
	return 0, errors.New("mocked error")
}

func TestService_PostScan(t *testing.T) {
	service := mockedPOST()
	badBuf := mockedBuffer{}
	if _, err := service.PostScan(badBuf, 1, Grype); err == nil {
		t.Fatal("expected form io.copy error")
	}

	buf := new(bytes.Buffer)
	_ = json.NewEncoder(buf).Encode(map[string]string{"foo": "bar"})

	resScan, err := service.PostScan(buf, 1, Grype)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%+v\n", resScan)
	if resScan.TestId != 1 {
		t.Fatalf("Expected ID %d, Got ID %d\n", 1, resScan.TestId)
	}
}

func TestGetPaginatedResponse(t *testing.T) {
	server := httptest.NewServer(http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {
		response.WriteHeader(http.StatusNotFound)
	}))
	service := APIClient{client: server.Client(), url: server.URL}

	// Mimic a 404 response
	if _, err := getPaginatedResponse(service, service.url); err == nil {
		t.Fatal("Expected 404 error")
	}

	// Mimic a closed server
	server.Close()
	if _, err := getPaginatedResponse(service, service.url); err == nil {
		t.Fatal("Expected error for closed server")
	}

	service = *mockAPIClient(func(w http.ResponseWriter, _ *http.Request) {
		w.WriteHeader(http.StatusOK)
	})

	if res, err := getPaginatedResponse(service, service.url); err == nil {
		t.Logf("%+v\n", res)
		t.Fatal("Expected error for bad parse")
	}
}

func TestCastByEncoding(t *testing.T) {
	//var badResults []interface{}

	_, err := castByEncoding[struct {
		FirstName string
		LastName  string
	}]([]interface{}{make(chan string)})

	if err == nil {
		t.Fatal("Expected error for bad interface")
	}

	_, err = castByEncoding[chan string]([]interface{}{"A", "B", "C"})

	if err == nil {
		t.Fatal("Expected Decoding error")
	}
}

func TestGet(t *testing.T) {
	server := httptest.NewServer(http.HandlerFunc(func(_ http.ResponseWriter, _ *http.Request) {}))
	client := APIClient{client: server.Client()}
	server.Close()
	// provoke a TCP Dial up error from a closed server
	if _, err := get[interface{}](client, server.URL); err == nil {
		t.Fatal("Expected error from a closed server")
	}

	client = *mockedGET(struct {
		FirstName string
	}{FirstName: "Some name"})

	if _, err := get[chan string](client, client.url); err == nil {
		t.Fatal("Expected error from bad casting")
	}
}

func TestPost(t *testing.T) {
	server := httptest.NewServer(http.HandlerFunc(func(_ http.ResponseWriter, _ *http.Request) {}))
	client := APIClient{client: server.Client()}
	server.Close()
	// provoke a TCP Dial up error from a closed server
	if _, err := post[interface{}](client, new(bytes.Buffer), "application/json", server.URL); err == nil {
		t.Fatal("Expected error from a closed server")
	}
	client = *mockAPIClient(func(res http.ResponseWriter, _ *http.Request) {
		res.WriteHeader(http.StatusNotFound)
	})

	// provoke 404 error
	if _, err := post[interface{}](client, new(bytes.Buffer), "application/json", client.url); err == nil {
		t.Fatal("Expected 404 response error")
	}

	client = *mockedPOST()

	// provoke empty body response
	if _, err := post[chan string](client, new(bytes.Buffer), "application/json", client.url); err == nil {
		t.Fatal("Expected error from bad casting")
	}

	client = *mockedPOST()

	// provoke error decoding the response object
	buf := new(bytes.Buffer)
	_ = json.NewEncoder(buf).Encode(map[string]string{"foo": "bar"})
	if _, err := post[chan string](client, buf, "application/json", client.url); err == nil {
		t.Fatal("Expected error from bad casting")
	}
}

// Helper functions

func mockedPOST() *APIClient {
	return mockAPIClient(func(w http.ResponseWriter, r *http.Request) {
		buf := new(bytes.Buffer)
		var object map[string]interface{}
		w.WriteHeader(http.StatusCreated)

		if r.RequestURI == "/api/v2/import-scan/" {
			_ = json.NewEncoder(w).Encode(map[string]int{"test_id": 1})
			return
		}

		_, _ = io.Copy(buf, r.Body)
		if buf.Len() == 0 {
			return
		}
		_ = json.NewDecoder(buf).Decode(&object)
		object["id"] = 1
		object["test_id"] = 1
		_ = json.NewEncoder(w).Encode(object)
	})
}

func mockedGET(givenResponse interface{}) *APIClient {
	return mockAPIClient(func(w http.ResponseWriter, _ *http.Request) {
		w.WriteHeader(http.StatusOK)
		res := models.PaginatedResponse{Count: 1, Results: []interface{}{givenResponse}}
		_ = json.NewEncoder(w).Encode(res)
	})
}

func mockAPIClient(handlerFunc func(http.ResponseWriter, *http.Request)) *APIClient {
	server := httptest.NewServer(http.HandlerFunc(handlerFunc))
	return NewDefaultService("abc123", server.URL).WithClient(server.Client())
}
